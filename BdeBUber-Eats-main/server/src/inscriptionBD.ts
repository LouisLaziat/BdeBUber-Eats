import { createHash } from "crypto";
import { UserFormData } from "./misc";
import { MongoClient, Collection, Db } from "mongodb";
import { connectToMongo } from "./connexionBD";
import logger from "./winstonconfig";

export async function receiveInsREQ(
  formData: FormData | { [key: string]: any }
): Promise<boolean> {
  let form = new FormData();
  if (!(formData instanceof FormData)) {
    for (const key in formData) {
      form.append(key, formData[key]);
    }
  } else form = formData;
  let passwordValid = verifyPassword(
    form.get("password")?.toString() || "",
    form.get("confirmPassword")?.toString() || ""
  );
  let emailUsed: boolean = await verifyEmail(
    form.get("email")?.toString() || "",

    await connectToMongo(process.env.DB_URI)
  );

  logger.info(
    "Password Valid? " + passwordValid + "\n" + "Email Exists? " + !emailUsed
  );

  if (passwordValid && emailUsed) {
    form.set("password", hashAndSalt(form.get("password")?.toString() || ""));
    insertElements(form, await connectToMongo(process.env.DB_URI));
    return true;
  } else {
    return false;
  }
}

function verifyPassword(password: string, confirmPassword: string): boolean {
  //password validation regex generated by chatGPT
  // min 8 char un symbole une lettre maj et min ainsi qu'un chiffre
  const passwordRegex =
    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+~`|}{[\]:;'<>?,./\\-])[A-Za-z\d!@#$%^&*()_+~`|}{[\]:;'<>?,./\\-]{8,}$/;

  let regexTest: boolean | null = passwordRegex.test(password);
  let confirmed = password === confirmPassword;
  return regexTest && confirmed;
}

async function verifyEmail(
  email: string,
  client: MongoClient
): Promise<boolean> {
  const db: Db = client.db("bdebuber");
  const collection: Collection = db.collection("utilisateur");

  const result = await collection.findOne({ email: email });
  return result === null;
}

export function hashAndSalt(password: string): string {
  const salt = "727WYSI";
  let hashedPass = password + salt;
  const hash = createHash("sha256").update(hashedPass).digest("hex");

  return hash;
}

async function insertElements(formElements: FormData, client: MongoClient) {
  const addresses: string[] = [];
  addresses.push(formElements.get("address")?.toString() || "");
  const database = client.db("bdebuber");
  const collection: Collection<UserFormData> =
    database.collection("utilisateur");
  const user: UserFormData = {
    name: formElements.get("name")?.toString() || "",
    prename: formElements.get("prename")?.toString() || "",
    email: formElements.get("email")?.toString() || "",
    address: addresses,
    city: formElements.get("city")?.toString() || "",
    phone: formElements.get("phone")?.toString() || "",
    password: formElements.get("password")?.toString() || "",
  };

  const result = await collection.insertOne(user);
  client.close();
  result;
}
